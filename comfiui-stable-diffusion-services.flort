Florted: 2024-08-15 10:04:37
|-- comfiui-stable-diffusion-services/
|   |-- README.md
|   |-- Makefile

Path: README.md
File: README.md
-------
# ComfyUI and Stable Diffusion Web UI Setup

This repository contains the necessary configuration files and a setup script to install and run both ComfyUI and Stable Diffusion Web UI (AUTOMATIC1111) on your server. The setup includes systemd service files and an Nginx configuration for remote access.

## Table of Contents

- [Overview](#overview)
- [Setup Process](#setup-process)
- [Configuration Changes](#configuration-changes)
- [How to Use](#how-to-use)
- [Troubleshooting](#troubleshooting)

## Overview

This setup allows you to run either ComfyUI or Stable Diffusion Web UI on your server, with Nginx acting as a reverse proxy to make them accessible remotely. Both services are managed by systemd, ensuring they start automatically at boot and restart if they fail.

### Important Note: 
- **Only one UI service can run at a time** due to port conflicts and resource contention (CUDA), though if you want both.. let me know and I'll update the script.
- **Customization Required**: The provided script and configuration files contain placeholders that you need to update to match your specific environment.


## Setup Process

### 1. Clone the Repository

First, clone this repository to your server:

```bash
git clone https://github.com/yourusername/comfiui-stable-diffusion-services.git 
cd comfiui-stable-diffusion-services
```

### 2. Run the Setup Script

The setup script will:

- Clone the ComfyUI and Stable Diffusion Web UI repositories.
- Set up Python virtual environments (venvs) for both.
- Copy and configure the systemd service files.
- Install and configure Nginx.

To run the script, make it executable and execute it:

```bash
chmod +x setup.sh
./setup.sh
```

### 3. Enter Your Server Name

When prompted by the setup script, enter your server name (e.g., `gpu2.watkinslabs.com`). This will configure Nginx to use your specified server name.

### 4. Verify the Setup

Once the script completes, open your web browser and navigate to your domain or IP address (e.g., `http://gpu2.watkinslabs.com`) to ensure the UI is accessible.

## Configuration Changes

### 1. Customize Service Files

The service files located in the `/etc/systemd/system/` directory contain placeholders that must be updated, setup script does this for you, but a manual edit works as well.

- **INSTALL_DIR**: Replace this placeholder in the service files with the actual path where you installed the services.


Example:

```bash
sudo sed -i "s|INSTALL_DIR|/home/your_username|g" /etc/systemd/system/sdwebui.service
sudo sed -i "s|INSTALL_DIR|/home/your_username|g" /etc/systemd/system/comfyui.service
```

### 2. Nginx Configuration

The Nginx configuration file (`nginx/nginx.conf`) contains a placeholder for your server name, setup.sh does this for you but you can change it manualy as well.:

- **SERVER_NAME**: This placeholder will be replaced by the setup script based on your input.

Example:

```bash
sudo sed -i "s|SERVER_NAME|yourdomain.com|g" /etc/nginx/nginx.conf
```

## How to Use

### Start and Enable the Services

Once the script has been executed and configuration files updated, you can start and enable the services:

For Stable Diffusion Web UI:

```bash
sudo systemctl start sdwebui.service
sudo systemctl enable sdwebui.service
```

For ComfyUI:

```bash
sudo systemctl start comfyui.service
sudo systemctl enable comfyui.service
```

### Switching Between Services

To switch between Stable Diffusion Web UI and ComfyUI, stop the currently running service and start the other:

```bash
sudo systemctl stop sdwebui.service
sudo systemctl start comfyui.service
```

Repeat the process as needed to switch back.

## Troubleshooting

- **Service Fails to Start**: Check the service status with `sudo systemctl status sdwebui.service` or `sudo systemctl status comfyui.service` to see any error messages.
- **Web UI Not Loading**: Ensure Nginx is running and the services are active. Check Nginx logs in `/var/log/nginx/error.log`.
- **Permission Issues**: Ensure that the services are running under the correct user and that the directories have the necessary permissions.


## Logs

Logs for both services and Nginx are stored in the `/var/log/` directory. These logs are useful for troubleshooting any issues that arise.

### Stable Diffusion Web UI Logs

- **Standard Output**: `/var/log/sdwebui.log`
- **Standard Error**: `/var/log/sdwebui.log`

### ComfyUI Logs

- **Standard Output**: `/var/log/comfyui.log`
- **Standard Error**: `/var/log/comfyui.log`

### Nginx Logs

- **Error Log**: `/var/log/nginx/error.log`
- **Access Log**: `/var/log/nginx/access.log`

To view the logs, you can use the `cat`, `less`, or `tail -f` commands. For example:

```bash
# View the latest logs for Stable Diffusion Web UI
tail -f /var/log/sdwebui.log

# View the latest logs for ComfyUI
tail -f /var/log/comfyui.log

# View Nginx error logs
tail -f /var/log/nginx/error.log
```

----
Path: Makefile
File: Makefile

# Variables
SD_WEBUI_REPO=https://github.com/AUTOMATIC1111/stable-diffusion-webui.git
COMFYUI_REPO=https://github.com/comfyanonymous/ComfyUI.git
APP_SOURCE_DIR=./ai_manager
INSTALL_DIR=/opt/AI
SERVER_NAME=gpu2.watkinslabs.com
SERVICE_USER=ai-manager
SERVICE_GROUP=www-data

.PHONY: all install_services install_sdwebui install_comfyui install_nginx configure_nginx  stop_services enable_sdwebui enable_comfyui disable_services

# Default target: Display help message
help:
	@echo "Usage: make [TARGET]"
	@echo ""
	@echo "Available targets:"
	@echo "  Install the apps:"
	@echo "    install_nginx        Download and Install Nginx"
	@echo "    install_sdwebui      Download and Install Stable Diffusion Web UI app"
	@echo "    install_comfyui      Download and Install ComfyUI app"
	@echo "    install_ai_manager   Install the python web app ai_manager app to the installation directory"
	@echo " "
	@echo "  Setup the services:"
    @echo "    setup                Install and configure systemd services for each app"
	@echo " "
	@echo "  Running Things"
	@echo "    AI-Manager"
	@echo "      enable_ai_manager    Enable ai_manager on boot (web app for switching)"
	@echo "      disable_ai_manager   Disable the ai_manager service"
	@echo "      start_ai_manager     Start the ai_manager service"
	@echo "      stop_ai_manager      Stop the ai_manager service"
	@echo "    Stable Diffusion "
	@echo "      enable_sdwebui       Enable Stable Diffusion Web UI (and disable ComfyUI)"
	@echo "    ComfyUI "
	@echo "      enable_comfyui       Enable ComfyUI (and disable Stable Diffusion Web UI)"
    @echo "    Global "
	@echo "      disable_services     Disable both sdwebui and comfyui services"
	@echo "      stop_services        Stop all 3 services"



# Create the group if it doesn't exist and create ai_manager user
create_user_group:
	@echo "Creating $(SERVICE_GROUP) group if it doesn't exist..."
	@groupadd -f $(SERVICE_GROUP)
	@echo "Creating $(SERVICE_USER) user and adding to $(SERVICE_GROUP)..."
	@useradd -m -s /bin/bash $(SERVICE_USER) || echo "User $(SERVICE_USER) already exists."
	@usermod -aG $(SERVICE_GROUP) $(SERVICE_USER)
	@echo "User $(SERVICE_USER) added to $(SERVICE_GROUP)..."

# Create sudoers file for ai-manager
create_sudoers_file:
	@echo "Creating sudoers file for $(SERVICE_USER)..."
	@echo "$(SERVICE_USER) ALL=(ALL) NOPASSWD: /bin/systemctl start ai_manager.service, /bin/systemctl stop ai_manager.service, /bin/systemctl restart ai_manager.service, /bin/systemctl is-active ai_manager.service" | sudo tee /etc/sudoers.d/ai-manager >/dev/null
	@echo "$(SERVICE_USER) ALL=(ALL) NOPASSWD: /bin/systemctl start comfyui.service, /bin/systemctl stop comfyui.service, /bin/systemctl restart comfyui.service, /bin/systemctl is-active comfyui.service" | sudo tee -a /etc/sudoers.d/ai-manager >/dev/null
	@echo "$(SERVICE_USER) ALL=(ALL) NOPASSWD: /bin/systemctl start sdwebui.service, /bin/systemctl stop sdwebui.service, /bin/systemctl restart sdwebui.service, /bin/systemctl is-active sdwebui.service" | sudo tee -a /etc/sudoers.d/ai-manager >/dev/null
	@echo "Sudoers file created at /etc/sudoers.d/ai-manager"
	@chmod 0440 /etc/sudoers.d/ai-manager
	@echo "Validating sudoers file..."
	@visudo -c || (echo "Sudoers validation failed. Please check the syntax." && exit 1)

# Combined target to create the user, group, update sudoers, and set permissions
create_sa: create_user_group create_sudoers_file set_permissions
	@echo "$(SERVICE_USER) user setup complete with sudo permissions."

# Set permissions for the /opt/AI directory
set_permissions:
	@echo "Setting permissions for $(INSTALL_DIR) directory..."
	@chown -R $(SERVICE_USER):$(SERVICE_GROUP) $(INSTALL_DIR)
	@chmod -R 775 $(INSTALL_DIR)

# Create the installation directory if it doesn't exist
create_install_dir:
	@if [ ! -d "$(INSTALL_DIR)" ]; then \
		echo "Creating installation directory $(INSTALL_DIR)..."; \
		mkdir -p $(INSTALL_DIR); \
	else \
		echo "Installation directory $(INSTALL_DIR) already exists."; \
	fi


# Copy the ai_manager app to the installation directory
install_ai_manager: create_install_dir 
	@echo "Copying ai_manager app to $(INSTALL_DIR)..."
	@rsync -av --exclude='venv' $(APP_SOURCE_DIR)/ $(INSTALL_DIR)/ai_manager/
	$(MAKE) setup_ai_manager_venv
	$(MAKE) set_permissions  


# Set up virtual environment for ai_manager and install Flask
setup_ai_manager_venv: create_install_dir
	@echo "Setting up venv for ai_manager..."
	@python3 -m venv $(INSTALL_DIR)/ai_manager/venv
	@echo "Installing Flask in ai_manager venv..."
	$(INSTALL_DIR)/ai_manager/venv/bin/pip install Flask gradio 
	$(MAKE) set_permissions  


# Install Stable Diffusion Web UI
install_sdwebui: create_install_dir
	@echo "Cloning Stable Diffusion Web UI..."
	@git clone $(SD_WEBUI_REPO) $(INSTALL_DIR)/stable-diffusion-webui
	@echo "Setting up venv for Stable Diffusion Web UI..."
	@cd $(INSTALL_DIR)/stable-diffusion-webui && python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt && deactivate
	$(MAKE) set_permissions  

# Install ComfyUI
install_comfyui: create_install_dir
	@echo "Cloning ComfyUI..."
	@git clone $(COMFYUI_REPO) $(INSTALL_DIR)/comfyui
	@echo "Setting up venv for ComfyUI..."
	@cd $(INSTALL_DIR)/comfyui && python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt && deactivate
	$(MAKE) set_permissions  

# Install and configure services
install_services: install_ai_manager
	@echo "Configuring systemd services..."
	@cp etc/systemd/system/sdwebui.service /etc/systemd/system/
	@cp etc/systemd/system/comfyui.service /etc/systemd/system/
	@cp etc/systemd/system/ai_manager.service /etc/systemd/system/
	@sed -i "s|INSTALL_DIR|$(INSTALL_DIR)|g" /etc/systemd/system/sdwebui.service
	@sed -i "s|INSTALL_DIR|$(INSTALL_DIR)|g" /etc/systemd/system/comfyui.service
	@sed -i "s|INSTALL_DIR|$(INSTALL_DIR)|g" /etc/systemd/system/ai_manager.service
	@sed -i "s|SERVICE_USER|$(SERVICE_USER)|g" /etc/systemd/system/sdwebui.service
	@sed -i "s|SERVICE_USER|$(SERVICE_USER)|g" /etc/systemd/system/comfyui.service
	@sed -i "s|SERVICE_USER|$(SERVICE_USER)|g" /etc/systemd/system/ai_manager.service
	@sed -i "s|SERVICE_GROUP|$(SERVICE_GROUP)|g" /etc/systemd/system/sdwebui.service
	@sed -i "s|SERVICE_GROUP|$(SERVICE_GROUP)|g" /etc/systemd/system/comfyui.service
	@sed -i "s|SERVICE_GROUP|$(SERVICE_GROUP)|g" /etc/systemd/system/ai_manager.service	
	@systemctl daemon-reload

# Install Nginx
install_nginx:
	@echo "Installing Nginx..."
	@dnf update
	@dnf install -y nginx

# Configure Nginx
configure_nginx:
	@echo "Checking if Nginx configuration exists..."
	@if [ -f /etc/nginx/nginx.conf ]; then \
		echo "Backing up existing Nginx configuration..."; \
		cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak; \
	else \
		echo "Nginx configuration not found, skipping backup."; \
	fi
	@echo "Configuring Nginx..."
	@cp etc/nginx/nginx.conf /etc/nginx/nginx.conf
	@sed -i "s|SERVER_NAME|$(SERVER_NAME)|g" /etc/nginx/nginx.conf
	@echo "Testing Nginx configuration..."
	@nginx -t
	@if [ $$? -eq 0 ]; then \
		echo "Restarting Nginx..."; \
		systemctl restart nginx; \
		echo "Nginx configuration applied successfully."; \
	else \
		echo "Nginx configuration test failed. Restoring previous configuration."; \
		if [ -f /etc/nginx/nginx.conf.bak ]; then \
			cp /etc/nginx/nginx.conf.bak /etc/nginx/nginx.conf; \
			systemctl restart nginx; \
			echo "Restored previous Nginx configuration."; \
		else \
			echo "Backup not found, cannot restore previous configuration."; \
		fi \
	fi

# Enable ai manager
enable_ai_manager:
	@systemctl enable ai_manager.service
	
# Start ai_manager
start_ai_manager:
	@echo "Starting ai_manager service..."
	@systemctl start ai_manager.service

# Stop ai_manager 
stop_ai_manager:
	@echo "Starting ai_manager service..."
	@systemctl stop ai_manager.service

# Stop ai_manager 
disable_ai_manager:
	@echo "Disabeling ai_manager service..."
	@systemctl disable ai_manager.service

# Stop services
stop_services:
	@echo "Stopping ai_manager, sdwebui, and comfyui services..."
	@systemctl stop ai_manager.service
	@systemctl stop sdwebui.service
	@systemctl stop comfyui.service

# Enable Stable Diffusion Web UI
enable_sdwebui: stop_services
	@echo "Enabling sdwebui service and disabling comfyui service..."
	@systemctl start sdwebui.service

# Enable ComfyUI 
enable_comfyui: stop_services
	@echo "Enabling comfyui service and disabling sdwebui service..."
	@systemctl start comfyui.service

# Disable both sdwebui and comfyui services
disable_services:
	@echo "Disabling both sdwebui and comfyui services..."
	@systemctl disable sdwebui.service
	@systemctl disable comfyui.service

setup: install_services configure_nginx